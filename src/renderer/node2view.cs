namespace purry;
public partial class TemplateEngine
{
    StringBuilder sb_using, sb_func;
    String layout;

    private string Node2ViewClass(String name, ParseNode node)
    {
        (sb_using, sb_func, layout) = (new(), new(), null);
        var body = Node2String(node);

        StringBuilder sb = new();
        sb.AddL("using " + this.GetType().Namespace + ";");
        sb.AddL(sb_using.ToString());
        sb.AddL("namespace Views;");
        sb.AddL("//--------------------------------------------");
        sb.AddL("// <auto-generated>                           ");
        sb.AddL("//     This code was generated by a tool.     ");
        sb.AddL("// </auto-generated>                          ");
        sb.AddL("//--------------------------------------------");
        sb.AddL("public class " + name + " : View");
        sb.AddL("{");
        sb.AddL("    public " + name + "(Response res, JO ViewData, dynamic ViewBag, TempJO TempData) :");
        sb.AddL("        base(res, ViewData, (object)ViewBag, TempData) { }");
        sb.AddL("    public " + name + "(View child) : base(child) { }");
        sb.AddL(sb_func.ToString());
        sb.AddL("    public override string GetHTML()");
        sb.AddL("    {");
        sb.AddL("        Layout = " + (layout ?? "null") + ";");
        sb.AddL(body);
        sb.AddL("        if (Layout == null) return GetW();");
        sb.AddL("        var type = Type.GetType(\"Views.\" + GetClassName());");
        sb.AddL("        return (Activator.CreateInstance(type, this) as View).GetHTML();");
        sb.AddL("    }");
        sb.AddL("}");


        return sb.ToString(); ;
    }

    private String Node2String(ParseNode node)
    {
        StringBuilder sb = new();
        foreach (var child in node.childs) sb.Append(child switch
        {
            ParseNode o => Node2String(o),
            string o => node.NType == NTYPE.CLIENT ? o.Replace('\"', '＂') : o,
            _ => throw new ArgumentException("???")
        });

        var rt = sb.ToString();
        var parentType = node.parent?.NType;

        switch (node.NType)
        {
            case NTYPE.STRING: if(node is not CS_StrNode) rt = rt.Replace('\"', '＂'); break;
            case NTYPE.LAYOUT: layout = rt; return "";
            case NTYPE.FUNCTION: sb_func.AddL(rt); return "";
            case NTYPE.USING: sb_using.AddL(rt.Last() == ';' ? rt : rt + ";"); return "";
            case NTYPE.SECTION:
                rt = "\nSetSection(\"" + (node as SectionNode).Name + "\");\n" + rt;
                rt += "\nOffSection(\"" + (node as SectionNode).Name + "\");\n";
                if (parentType == NTYPE.CLIENT) return "\");" + rt + "W(@\"";
                break;
            case NTYPE.CLIENT:
                if (parentType != NTYPE.CLIENT) return "W(@\"" + rt + "\");";
                break;
            case NTYPE.CSHARP:
                if (parentType == NTYPE.CLIENT) return "\");" + rt + "W(@\"";
                break;
            case NTYPE.EXPRESS:
                if (parentType == NTYPE.CLIENT) return "\"+" + rt + "+@\"";
                return "W(" + rt + ");";
        }

        return rt;
    }
}